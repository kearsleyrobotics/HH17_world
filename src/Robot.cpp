// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<HHBaseDrive> Robot::hHBaseDrive;
std::shared_ptr<HHGearRelease> Robot::hHGearRelease;
std::shared_ptr<HHGearTilt> Robot::hHGearTilt;
std::shared_ptr<HHRopeClimb> Robot::hHRopeClimb;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    hHBaseDrive.reset(new HHBaseDrive());
    hHGearRelease.reset(new HHGearRelease());
    hHGearTilt.reset(new HHGearTilt());
    hHRopeClimb.reset(new HHRopeClimb());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	//autonomousCommand.reset(new HHACDoNothing());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	double angle = Robot::hHBaseDrive->hHGBaseDrive->GetAngle();
	frc::SmartDashboard::PutNumber("Gyro angle", angle);
	//frc::SmartDashboard::PutNumber("Gyro angle calc", angle*.03);
	frc::SmartDashboard::PutNumber("Encoder Distance",Robot::hHBaseDrive->hHEBaseDrive->GetDistance());
	//frc::SmartDashboard::PutNumber("Encoder Rate",Robot::hHBaseDrive->hHEBaseDrive->GetRate());
	// instantiate the command used for the autonomous period
	autonomousCommand = new HHACDoNothing();
	autoChooser.AddDefault("a Do Nothing", new HHACDoNothing());
	autoChooser.AddObject("b Cross Base Line", new HHACDSBaseLineCross());
	autoChooser.AddObject("c Wall to lift Straight", new HHACDS2WallToLiftStraight());
	autoChooser.AddObject("d Turn Right to Lift timed", new HHACDSBaseLineCrossTurnRightTimeInputDriveToLift());
	autoChooser.AddObject("e Turn Left to Lift timed", new HHACDSBaseLineCrossTurnLeftTimeInputDriveToLift());
	autoChooser.AddObject("f Turn Right to Lift dist", new HHACDriveDistFastTurnRight1DriveDistSlow());
	autoChooser.AddObject("g Turn Left to Lift dist", new HHACDriveDistFastTurnLeft1DriveDistSlow());
	frc::SmartDashboard::PutData("Auto Mode:", &autoChooser);

	frc::SmartDashboard::PutNumber("DS-Auto-Delay-Seconds",0.0);
	double hHDSAutoDelay = SmartDashboard::GetNumber("DS-Auto-Delay-Seconds",0.0);
	frc::SmartDashboard::PutNumber("DS-Auto-Timed-Turn-Seconds",0.0);
	double hHDSTimedTurn = SmartDashboard::GetNumber("DS-Auto-Timed-Turn-Seconds",0.0);

	double hHDSDistWall = SmartDashboard::GetNumber("DS-Auto-Dist-From-Wall",73.0);
	//frc::SmartDashboard::PutNumber("DS-Auto-Dist-From-Wall",hHDSDistWall);
	frc::SmartDashboard::PutNumber("roboRIO-Dist-From-Wall",hHDSDistWall);
	frc::SmartDashboard::PutNumber("roboRIO-Dist-From-Wall2",hHDSDistWall);

	double hHDSDistLift = SmartDashboard::GetNumber("DS-Auto-Dist-To-Lift",0.0);
	//frc::SmartDashboard::PutNumber("DS-Auto-Dist-To-Lift",hHDSDistLift);
	frc::SmartDashboard::PutNumber("roboRio-Dist-To-Lift",hHDSDistLift);
	frc::SmartDashboard::PutNumber("roboRio-Dist-To-Lift2",hHDSDistLift);
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {

	autonomousCommand = autoChooser.GetSelected();
	//if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	//if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

