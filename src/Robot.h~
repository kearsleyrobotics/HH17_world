// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef _ROBOT_H
#define _ROBOT_H

#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "Commands/HHACDSBaseLineCross.h"
#include "Commands/HHACDriveToLift.h"
#include "Commands/HHACDS2WallToLiftStraight.h"
#include "Commands/HHACDSBaseLineCrossTurnRightTimeInputDriveToLift.h"
#include "Commands/HHACDSBaseLineCrossTurnLeftTimeInputDriveToLift.h"
#include "Commands/HHACDriveDistFastTurnLeft1DriveDistSlow.h"
#include "Commands/HHACDriveDistFastTurnRight1DriveDistSlow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/HHACDoNothing.h"
#include "Subsystems/HHBaseDrive.h"
#include "Subsystems/HHGearRelease.h"
#include "Subsystems/HHGearTilt.h"
#include "Subsystems/HHRopeClimb.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "OI.h"

class Robot : public IterativeRobot {
public:
	//std::unique_ptr<Command> autonomousCommand;
	static std::unique_ptr<OI> oi;
	LiveWindow *lw = LiveWindow::GetInstance();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    static std::shared_ptr<HHBaseDrive> hHBaseDrive;
    static std::shared_ptr<HHGearRelease> hHGearRelease;
    static std::shared_ptr<HHGearTilt> hHGearTilt;
    static std::shared_ptr<HHRopeClimb> hHRopeClimb;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	frc::Command* autonomousCommand = nullptr;
	SendableChooser<frc::Command*> autoChooser;
	virtual void RobotInit();
	virtual void DisabledInit();
	virtual void DisabledPeriodic();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestPeriodic();
};
#endif
